using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

// 引入命名空间
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;


namespace ServiceManage
{
    public partial class FrmServiceManage : Form
    {

        #region 构造函数

        public FrmServiceManage()
        {
            InitializeComponent();

            // 加载窗体所遇初始化设置
            this.LoadSet();
        }

        #endregion
      
        #region 常量

        #region Oracle配置文件的相关常量

        /// <summary>
        /// 配置文件1的路径
        /// listener.ora路径名称：
        ///         C:\oracle11g\product\11.1.0\db_1\NETWORK\ADMIN\listener.ora
        /// </summary>
        private const String _listenerPath = @"C:\oracle11g\product\11.1.0\db_1\NETWORK\ADMIN\listener.ora";

        /// <summary>
        /// 配置文件1的内容
        /// 文件内容：
        ///        # listener.ora Network Configuration File: C:\oracle11g\product\11.1.0\db_1\network\admin\listener.ora
        ///        # Generated by Oracle configuration tools.
        ///
        ///        LISTENER =
        ///          (DESCRIPTION_LIST =
        ///            (DESCRIPTION =
        ///              (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1522))
        ///            )
        ///          )";
        /// </summary>
        private const String _listenerContent = @"# listener.ora Network Configuration File: C:\oracle11g\product\11.1.0\db_1\network\admin\listener.ora
# Generated by Oracle configuration tools.
 
LISTENER =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1522))
      (ADDRESS = (PROTOCOL = TCP)(HOST =localhost )(PORT = 1522))
    )
  )



";

        /// <summary>
        /// 配置文件2的路径
        /// tnsnames.ora路径名称：
        ///                 C:\oracle11g\product\11.1.0\db_1\NETWORK\ADMIN\tnsnames.ora
        /// </summary>
        private const String _tnsnamesPath = @"C:\oracle11g\product\11.1.0\db_1\NETWORK\ADMIN\tnsnames.ora";

        /// <summary>
        /// 配置文件2的内容
        /// 文件内容：
        ///         # tnsnames.ora Network Configuration File: C:\oracle11g\product\11.1.0\db_1\network\admin\tnsnames.ora
        ///         # Generated by Oracle configuration tools.
        ///
        ///         ACCP11G =
        ///           (DESCRIPTION =
        ///             (ADDRESS_LIST =
        ///               (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1522))
        ///              )
        ///             (CONNECT_DATA =
        ///                (SERVICE_NAME = accp11g)
        ///              )
        ///           )
        ///
        ///         LISTENER_ACCP11G =
        ///           (ADDRESS = (PROTOCOL = TCP)(HOST = localhost)(PORT = 1522))
        /// </summary>
        private const String _tnsnamesContent = @"# tnsnames.ora Network Configuration File: C:\oracle11g\product\11.1.0\db_1\network\admin\tnsnames.ora
# Generated by Oracle configuration tools.

ACCP11G =
  (DESCRIPTION =
    (ADDRESS_LIST =
      (ADDRESS = (PROTOCOL = TCP)(HOST =localhost )(PORT = 1522))
    )
    (CONNECT_DATA =
      (SERVICE_NAME = accp11g)
    )
  )

LISTENER_ACCP11G =
  (ADDRESS = (PROTOCOL = TCP)(HOST =localhost )(PORT = 1522))
";

        #endregion

        #endregion

        #region 字段

        /// <summary>
        /// 图片按钮的图片资源窗体
        /// </summary>
        private FrmImageButtons _frmImgBtn = new FrmImageButtons();

        /// <summary>
        /// 关于页面
        /// </summary>
        private FrmAbout _frmAbout = new FrmAbout();

        /// <summary>
        /// cmd线程对象，对服务管理的执行对象
        /// </summary>
        private Process _cmd;

        /// <summary>
        /// 获取当前窗体的坐标
        /// </summary>
        private Point _currLocation;

        /// <summary>
        /// 是否允许移动窗体坐标
        /// </summary>
        private bool _IsMouseDown = false;

        /// <summary>
        /// toad 注册机
        /// key：注册名
        /// value：注册码
        /// </summary>
        private Dictionary<String, String> _toadKeyGen = new Dictionary<String, String>();

        /// <summary>
        /// 是否启动超级模式
        /// </summary>
        private bool _IsSuperMode = false;

        /// <summary>
        /// 窗体是否停靠在Windows边缘
        /// </summary>
        private bool _IsDockWindow = false;

        #endregion

        #region 属性

        /// <summary>
        /// toad注册机的当前选中的key
        /// </summary>
        private String ToadKeyGenKey
        {
            get
            {
                return this.tscboToadKeyName.Text;
            }

            set
            {
                this.tscboToadKeyName.Text = value;
            }
        }

        /// <summary>
        /// 超级模式的图片按钮的图片引用
        /// </summary>
        private Image SuperModeImage
        {
            get
            {
                return this.picSuperMode.Image;
            }

            set
            {
                this.picSuperMode.Image = value;
            }
        }

        #endregion

        #region 方法

        /// <summary>
        /// 加载窗体所遇初始化设置
        /// </summary>
        private void LoadSet()
        {
            // 给控件绑定拖动窗体坐标的事件
            this.BindControlsMoveFormEvent();

            // 设置控件显示的图片
            this.SetControlImage();

            // 设置toad注册机
            this.SetToadKeyGen();

            // 设置窗体默认出现的位置
            this.Top = 20;
            //this.Left = 300;

            // 创建cmd线程对象
            this.CreateCommandProcess();
        }

        /// <summary>
        /// 创建一个cmd线程给全局变量  _cmd
        /// </summary>
        private void CreateCommandProcess()
        {
            try
            {
                this._cmd = new Process();//定义一个线程实例；
                this._cmd.StartInfo.FileName = "cmd.exe";//启动名为"cmd.exe"的线程，就相当于你点击电脑左下角的"开机"-"运行"-输入cmd后回车，也就是启动了命令提示符界面；
                this._cmd.StartInfo.UseShellExecute = false;//关闭Shell的使用
                this._cmd.StartInfo.RedirectStandardInput = true;//重定向标准输入
                this._cmd.StartInfo.RedirectStandardOutput = true;//重定向标准输出
                this._cmd.StartInfo.RedirectStandardError = true;//重定向错误输出
                this._cmd.StartInfo.CreateNoWindow = true;//设置不显示窗口
                this._cmd.Start();//此处才是启动了该线程
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message,Application.ProductName);
            }
        }

        /// <summary>
        /// 管理服务的方法，传入服务名称，自动控制服务
        /// 要执行多行操作，用英文；隔开。
        /// </summary>
        /// <param name="cmd">要执行的命令行代码</param>
        private void ExecuteServiceManage(String cmd)
        {
            // 替换字符串（如果是多个命令，就将分号，替换为换行）
            cmd = cmd.Replace(";", "\n");
            // 执行
            this._cmd.StandardInput.WriteLine(cmd);
        }
        
        /// <summary>
        /// 更正Oracle配置文件    listener.ora    和   tnsnames.ora
        /// </summary>
        private void CorrectOracleConfigurationFile()
        {
            // 判断监听文件是否存在，如果存在就更改文件否则就创建一个新的文件
            String dir = FrmServiceManage._listenerPath.Substring(0,FrmServiceManage._listenerPath.LastIndexOf("\\"));
            // 判断文件夹是否存在，如果不存在就新创建一个
            if (!Directory.Exists(dir))
                Directory.CreateDirectory(dir);

            try
            {
                FileStream fs = new FileStream(FrmServiceManage._listenerPath, FileMode.OpenOrCreate);
                StreamWriter sw = new StreamWriter(fs);
                // 修改监听文件
                sw.WriteLine(FrmServiceManage._listenerContent);
                // 释放资源
                sw.Close();
                sw.Dispose();
                fs.Close();
                fs.Dispose();

                // 修改另一个配置文件    tnsnames
                fs = new FileStream(FrmServiceManage._tnsnamesPath, FileMode.OpenOrCreate);
                sw = new StreamWriter(fs);
                sw.WriteLine(FrmServiceManage._tnsnamesContent);
                // 释放资源
                sw.Close();
                sw.Dispose();
                fs.Close();
                fs.Dispose();
                sw = null;
                fs = null;
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message, Application.ProductName);
            }
        }

        /// <summary>
        /// 绑定控件事件
        /// 点击窗体任何位置移动窗体坐标的事件
        /// MouseUp,MouseDown,MouseMove 三个事件
        /// </summary>
        private void BindControlsMoveFormEvent()
        {
            // 创建一个控件集合,等待循环追加事件
            List<Control> controls = new List<Control>();
            controls.Add(this);                             // 窗体本身
            controls.Add(this.pnlTopTitle);                 // 上边框，标题栏
            controls.Add(this.pnlBottomBorder);             // 下边框，
            controls.Add(this.pnlLeftBorder);               // 左边框
            controls.Add(this.pnlRightBorder);              // 右边框
            controls.Add(this.pnlContent);                  // 中间的内容
            controls.Add(this.tsControlButtons);            // 工具栏（所有按钮)
            controls.Add(this.pnlStatus);                   // 状态栏的panel
            controls.Add(this.lblTitleText);                // 标题栏的软件名称

            // 循环给集合中的控件添加拖动窗体的事件
            foreach (var ctrl in controls)
            {
                ctrl.MouseUp += this.Form_MouseUp;          // 鼠标指针释放按键
                ctrl.MouseDown += this.Form_MouseDown;      // 鼠标按下
                ctrl.MouseMove += this.Form_MouseMove;      // 鼠标移动

                // 设置鼠标按键释放，y轴最多为0；
                ctrl.MouseUp += this.FrmServiceManage_MouseUp;  
            }

            // 鼠标离开左边框和右边框，自动隐藏窗体
            this.pnlLeftBorder.MouseLeave += this.FrmServiceManage_MouseLeave;
            this.pnlRightBorder.MouseLeave += this.FrmServiceManage_MouseLeave;
            
            // 下边框，鼠标移入，显示窗体
            this.pnlBottomBorder.MouseEnter += this.FrmServiceManage_MouseEnter;
        }
        
        /// <summary>
        /// 设置和数据库相关的图片
        /// </summary>
        private void SetDatabaseImage()
        {
            try
            {
                // 设置每个数据库的图片
            this.tssbMySQL.Image = this.imgsCtrlPict.Images["mysql.png"];
            this.tssbSQL2005.Image = this.imgsCtrlPict.Images["sql2005.png"];
            this.tssbSQL2008.Image = this.imgsCtrlPict.Images["sql2008.png"];
            this.tssbOracle11g.Image = this.imgsCtrlPict.Images["oracle11g.png"];

            // 设置每个开启服务的菜单的图片
            this.tsmiMySQLServiceStart.Image = this.imgsCtrlPict.Images["start.png"];
            this.tsmiSQL2005ServiceStart.Image = this.imgsCtrlPict.Images["start.png"];
            this.tsmiSQL2008ServiceStart.Image = this.imgsCtrlPict.Images["start.png"];
            this.tsmiOracleMainServiceStart.Image = this.imgsCtrlPict.Images["start.png"];
            this.tsmiOracleListenerServiceStart.Image = this.imgsCtrlPict.Images["start.png"];

            // 设置每个暂停服务的菜单的图片
            this.tsmiSQL2005ServicePause.Image = this.imgsCtrlPict.Images["pause.png"];
            this.tsmiSQL2008ServicePause.Image = this.imgsCtrlPict.Images["pause.png"];
            this.tsmiOracleMainServicePause.Image = this.imgsCtrlPict.Images["pause.png"];

            // 设置每个继续服务的菜单的图片
            this.tsmiSQL2005ServiceContinue.Image = this.imgsCtrlPict.Images["continue.png"];
            this.tsmiSQL2008ServiceContinue.Image = this.imgsCtrlPict.Images["continue.png"];
            this.tsmiOracleMainServiceContinue.Image = this.imgsCtrlPict.Images["continue.png"];

            // 设置每个停止服务的菜单的图片
            this.tsmiMySQLServiceStop.Image = this.imgsCtrlPict.Images["stop.png"];
            this.tsmiSQL2005ServiceStop.Image = this.imgsCtrlPict.Images["stop.png"];
            this.tsmiSQL2008ServiceStop.Image = this.imgsCtrlPict.Images["stop.png"];
            this.tsmiOracleMainServiceStop.Image = this.imgsCtrlPict.Images["stop.png"];
            this.tsmiOracleListenerServiceStop.Image = this.imgsCtrlPict.Images["stop.png"];

            // 设置每个重启服务的菜单的图片
            this.tsmiMySQLServiceRestart.Image = this.imgsCtrlPict.Images["restart.png"];
            this.tsmiSQL2005ServiceRestart.Image = this.imgsCtrlPict.Images["restart.png"];
            this.tsmiSQL2008ServiceRestart.Image = this.imgsCtrlPict.Images["restart.png"];
            this.tsmiOracleMainServiceRestart.Image = this.imgsCtrlPict.Images["restart.png"];
            this.tsmiOracleListenerServiceRestart.Image = this.imgsCtrlPict.Images["restart.png"];

            // 设置每个运行软件的菜单的图片
            this.tsmiMySQLOpen.Image = this.imgsCtrlPict.Images["mysql.png"];
            this.tsmiSQL2005Open.Image = this.imgsCtrlPict.Images["sql2005.png"];
            this.tsmiSQL2008Open.Image = this.imgsCtrlPict.Images["sql2008.png"];
            this.tsmiOracleTodeOpen.Image = this.imgsCtrlPict.Images["toad.png"];

            // 设置Oracle更新配置文件的菜单的图片
            this.tsmiOracleCorrectConfigurationFile.Image = this.imgsCtrlPict.Images["change.png"];
            // 设置 toad （蛤蟆工具）注册机菜单的图片
            this.tsmiToadKeyGen.Image = this.imgsCtrlPict.Images["toadkeygen.png"];
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message,Application.ProductName);
            }
        }

        /// <summary>
        /// 设置软件的图标
        /// </summary>
        private void SetOtherSoftwareImage()
        { 
            // 设置学习软件的图片
            this.tsmiStudaySoftware.Image = this.imgsCtrlPict.Images["studysoftware.png"];

            // 设置Adobe的软件图片
            this.tsmiAdobe.Image = this.imgsCtrlPict.Images["adobe.png"];
            this.tsmiAboleDW4.Image = this.imgsCtrlPict.Images["dw4.png"];
            this.tsmiAdobeFB4.Image = this.imgsCtrlPict.Images["fb4.png"];
            this.tsmiAdobeFlash4.Image = this.imgsCtrlPict.Images["flash4.png"];
            this.tsmiAdobePS4.Image = this.imgsCtrlPict.Images["ps4.png"];
            this.tsmiAdobeReaderX.Image = this.imgsCtrlPict.Images["reader.png"];

            // 设置Microsoft的软件图片
            this.tsmiMicrosoft.Image = this.imgsCtrlPict.Images["microsoft.png"];
            this.tsmiMSVS2005.Image = this.imgsCtrlPict.Images["vs2005.png"];
            this.tsmiMSVS2008.Image = this.imgsCtrlPict.Images["vs2008.png"];
            this.tsmiMSVS2010.Image = this.imgsCtrlPict.Images["vs2010.png"];
            this.tsmiMSMSDN2005.Image = this.imgsCtrlPict.Images["msdn.png"];
            this.tsmiMSMSDN2008.Image = this.imgsCtrlPict.Images["msdn.png"];

            // 设置Eclipse的软件图片
            this.tsmiEclipse.Image = this.imgsCtrlPict.Images["eclipse.png"];
            this.tsmiEclipse6_5.Image = this.imgsCtrlPict.Images["myeclipse6.5.png"];
            this.tsmiEclipse7_5.Image = this.imgsCtrlPict.Images["myeclipse7.5.png"];
            this.tsmiEclipse8_5.Image = this.imgsCtrlPict.Images["myeclipse8.5.png"];
            this.tsmiEclipseKeygen.Image = this.imgsCtrlPict.Images["eclipsekeygen.png"];

            // 设置其他学习软件的图标
            this.tsmiStudyOther.Image = this.imgsCtrlPict.Images["studyother.png"];
            this.tsmiEditPlus3.Image = this.imgsCtrlPict.Images["editplus3.png"];
            this.tsmiXDict2008.Image = this.imgsCtrlPict.Images["xdict2008.png"];
            this.tsmiYZRF5.Image = this.imgsCtrlPict.Images["yzrf5.png"];

            // 辅助工具
            this.tsmiHelpTool.Image = this.imgsCtrlPict.Images["helptool.png"];
            this.tsmiHelpPMLX.Image = this.imgsCtrlPict.Images["pmlx.png"];
            this.tsmiHelpFirefox.Image = this.imgsCtrlPict.Images["firefox.png"];
            this.tsmiHelpIE.Image = this.imgsCtrlPict.Images["ie.png"];
            this.tsmiHelpStuClient.Image = this.imgsCtrlPict.Images["stuclient.png"];

            // 系统附件工具
            this.tsmiSysSubTool.Image = this.imgsCtrlPict.Images["subtool.png"];
            this.tsmiSysCalc.Image = this.imgsCtrlPict.Images["calc.png"];
            this.tsmiSysCmd.Image = this.imgsCtrlPict.Images["cmd.png"];
            this.tsmiSysExplorer.Image = this.imgsCtrlPict.Images["explorer.png"];
            this.tsmiSysNotepad.Image = this.imgsCtrlPict.Images["notepad.png"];
            this.tsmiSysPaint.Image = this.imgsCtrlPict.Images["paint.png"];
            this.tsmiSysWriter.Image = this.imgsCtrlPict.Images["writer.png"];
            this.tsmiSysOSK.Image = this.imgsCtrlPict.Images["osk.png"];
            this.tsmiSysZoom.Image = this.imgsCtrlPict.Images["magnify.png"];
            this.tsmiSysMstsc.Image = this.imgsCtrlPict.Images["mstsc.png"];
            // 系统工具
            this.tsmiSysTools.Image = this.imgsCtrlPict.Images["systool.png"];
            this.tsmiSysCharmap.Image = this.imgsCtrlPict.Images["charmap.png"];
            this.tsmiSysCleanmgr.Image = this.imgsCtrlPict.Images["cleanmgr.png"];
            this.tsmiSysMSInfo32.Image = this.imgsCtrlPict.Images["msinfo32.png"];
            this.tsmiSysConfig.Image = this.imgsCtrlPict.Images["msconfig.png"];
            
            // Microsoft Office 工具的图标
            this.tsmiMSOffice.Image = this.imgsCtrlPict.Images["office.png"];
            this.tsmiOfficeAccess.Image = this.imgsCtrlPict.Images["msaccess.png"];
            this.tsmiOfficeExcel.Image = this.imgsCtrlPict.Images["excel.png"];
            this.tsmiOfficeOutlook.Image = this.imgsCtrlPict.Images["outlook.png"];
            this.tsmiOfficePPT.Image = this.imgsCtrlPict.Images["powerpnt.png"];
            this.tsmiOfficeVisio.Image = this.imgsCtrlPict.Images["visio.png"];
            this.tsmiOfficeWord.Image = this.imgsCtrlPict.Images["winword.png"];

            // 管理工具的图标
            this.tsmiManager.Image = this.imgsCtrlPict.Images["managetool.png"];
            this.tsmiMgrCompmgmt.Image = this.imgsCtrlPict.Images["compmgr.png"];
            this.tsmiMgrDevmgmt.Image = this.imgsCtrlPict.Images["devmgmt.png"];
            this.tsmiMgrControl.Image = this.imgsCtrlPict.Images["control.png"];
            this.tsmiMgrDiskmgmt.Image = this.imgsCtrlPict.Images["diskmgmt.png"];
            this.tsmiMgrEventvwr.Image = this.imgsCtrlPict.Images["eventvwr.png"];
            this.tsmiMgrInternetOpt.Image = this.imgsCtrlPict.Images["inetopt.png"];
            this.tsmiMgrLusrmgr.Image = this.imgsCtrlPict.Images["lusrmgr.png"];
            this.tsmiMgrRegedit.Image = this.imgsCtrlPict.Images["regedit.png"];
            this.tsmiMgrTaskmgr.Image = this.imgsCtrlPict.Images["taskmgr.png"];

            // 帮助文档
            this.tsmiHelpDoc.Image = this.imgsCtrlPict.Images["helpdoc.png"];
            this.tsmiHelpCSS.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJ2EE_API.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJ2EE5_0API_CN.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJAVA5_0API_CN.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJavaScript.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJavaScriptHelp_CN.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpJETSQL40.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpMySQL_CN_SC.Image = this.imgsCtrlPict.Images["helpchm.png"];
            this.tsmiHelpMySQL.Image = this.imgsCtrlPict.Images["helpchm.png"];
        }

        /// <summary>
        /// 设置控件的图片
        /// </summary>
        private void SetControlImage()
        {
            // 设置关闭图片按钮和最小化图片按钮的图片
            this.picMiniButton.Image = this._frmImgBtn.picMiniNormal.Image;
            this.picCloseButton.Image = this._frmImgBtn.picCloseNormal.Image;

            try
            {
                // 设置数据库菜单的图片
                this.SetDatabaseImage();

                // 设置其他软件的图片
                this.SetOtherSoftwareImage();

                // 设置超级模式按钮的图片
                this.picSuperMode.Image = this.imgsCtrlPict.Images["mode_normal.png"];

                // 设置其他软件的图标图片
                this.tssbAllSoftware.Image = this.imgsCtrlPict.Images["othersoftware.png"];
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message,Application.ProductName);
            }

        }

        /// <summary>
        /// 设置toad注册机
        /// </summary>
        private void SetToadKeyGen()
        {
            // 添加 toad 注册码
            this._toadKeyGen.Add("accp", "0-63920-02273-29060-01749");
            this._toadKeyGen.Add("aptech", "0-63920-03233-29060-08749");
            this._toadKeyGen.Add("hama", "0-63920-02353-29060-00749");
            this._toadKeyGen.Add("keygen", "0-63920-03073-29060-00749");
            this._toadKeyGen.Add("oracle", "0-63920-03473-29060-04749");
            this._toadKeyGen.Add("quest", "0-63920-03073-29060-00749");
            this._toadKeyGen.Add("toad", "0-63920-03873-29060-08749");

            // 循环将注册机的key添加到toad注册机的下拉列表中
            foreach (var key in this._toadKeyGen.Keys)
            {
                this.tscboToadKeyName.Items.Add(key);
            }

            // 设置注册机的key默认第一个被选中
            this.tscboToadKeyName.SelectedIndex = 0;
        }

        /// <summary>
        /// 获取toad注册机的注册码，
        /// 从toad注册机的key中获取对应的注册码（this.ToadKeyGenKey）
        /// </summary>
        /// <returns>如果返回null，则没有查找到对应key（下拉列表框）的value</returns>
        private String GetToadKeyGenValue()
        {
            String result = null;

            // 遍历，寻找对应key的value
            foreach (var keygen in this._toadKeyGen)
            {
                if (keygen.Key == this.ToadKeyGenKey)
                {
                    result = keygen.Value;
                    break;
                }
            }

            return result;
        }

        #region 类似QQ窗体自动隐藏的方法

        /// <summary>
        /// 鼠标弹起时，如果上边缘超过上顶端线。将其移动到顶端线上
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QQForm_MouseUp()
        {
            if (this.Location.Y < 0)
            {
                //MoveForm(new Point(this.Location.X, 0));
                this.Top = 0;
            }

            // 判断x轴坐标不能小于0
            if (this.Location.X < 0)
            {
                this.Left = 0;
            }
        }

        /// <summary>
        /// 如果上边缘在上顶端线上，鼠标离开则上滑窗体
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void QQForm_MouseLeave()
        {
            if (this.Location.Y == 0)
            {
                MoveForm(new Point(this.Location.X, 5 - this.Size.Height));
                
                // 设置DockWindow为true
                this._IsDockWindow = true;
            }

            // 判断x轴坐标不能小于0
            if (this.Location.X < 0)
            {
                this.Left = 0;
            }

        }

        /// <summary>
        /// 窗体移动函数，有缓慢移动特效。
        /// </summary>
        /// <param name="newPos"></param>
        private void MoveForm(Point newPos)
        {
            //200ms内移动完
            Point currentPos = this.Location;
            double step = (newPos.Y - this.Location.Y) / 10.0;
            for (int i = 1; i <= 10; i++)
            {
                try
                {
                    this.Location = new Point(this.Location.X, (int)(currentPos.Y + step * i));
                    System.Threading.Thread.Sleep(20);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message,Application.ProductName);
                }
            }
        }

        /// <summary>
        /// 鼠标进入窗体的响应事件
        /// </summary>
        private void QQForm_MouseEnter()
        {
            if (this.Location.Y == (5 - this.Size.Height))
            {
                MoveForm(new Point(this.Location.X, 0));

                // 设置DockWindow为false
                this._IsDockWindow = false;
            }

        }

        #endregion

        #endregion

        #region 事件

        #region 拖拽图片应用背景图片

        /// <summary>
        /// 拖拽上来的文件，显示在背景
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void FrmServiceManage_DragDrop(object sender, DragEventArgs e)
        {
            // 获取拖拽上来的文件的文件流
            FileStream fs = new FileStream(((System.Array)e.Data.GetData(DataFormats.FileDrop)).GetValue(0).ToString(),FileMode.Open);

            try
            {
                // 设置背景图片
                this.pnlContent.BackgroundImage = Image.FromStream(fs);
            }
            finally
            {
                //  关闭资源
                fs.Close();
                fs = null;
            }
            
        }

        /// <summary>
        /// 拖拽文件改变图标样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void FrmServiceManage_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
                e.Effect = DragDropEffects.Link;
            else
                e.Effect = DragDropEffects.None;
        }

        #endregion

        #region 关于按钮的相关事件

        /// <summary>
        /// 关于，显示关于窗体
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void lnkAbout_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Left)
            {
                this._frmAbout.StartPosition = FormStartPosition.CenterParent;
                this._frmAbout.ShowDialog();
            }
        }

        /// <summary>
        /// 关于按钮禁止获得焦点，
        /// 获得焦点之后，将焦点设置为工具条
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void lnkAbout_Enter(object sender, EventArgs e)
        {
            this.tsControlButtons.Focus();
        }

        #endregion

        #region 所有图片按钮的相关事件

        #region 关闭图片按钮的相关事件

        /// <summary>
        /// 关闭应用程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picCloseButton_MouseClick(object sender, MouseEventArgs e)
        {
            // 必须是鼠标左键单击，才能关闭
            if (e.Button != System.Windows.Forms.MouseButtons.Left)
                return;
            // 关闭当前程序的所有线程
            Application.ExitThread();
        }

        /// <summary>
        /// 当鼠标按下，在关闭图片按钮上改变样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picCloseButton_MouseDown(object sender, MouseEventArgs e)
        {
            // 必须是鼠标左键点击才改变样式
            if (e.Button != System.Windows.Forms.MouseButtons.Left)
                return;
            this.picCloseButton.Image = this._frmImgBtn.picCloseDown.Image;
        }

        /// <summary>
        /// 当鼠标进入关闭图片按钮时，更改样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picCloseButton_MouseEnter(object sender, EventArgs e)
        {
            this.picCloseButton.Image = this._frmImgBtn.picCloseHighlight.Image;
        }

        /// <summary>
        /// 当鼠标移出关闭按钮时，改变样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picCloseButton_MouseLeave(object sender, EventArgs e)
        {
            this.picCloseButton.Image = this._frmImgBtn.picCloseNormal.Image;
        }

        #endregion

        #region 最小化图片按钮的相关事件

        /// <summary>
        /// 当鼠标单击时，最小化窗体到任务栏
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picMiniButton_MouseClick(object sender, MouseEventArgs e)
        {
            // 必须是鼠标左键单击才能最小化
            if (e.Button != System.Windows.Forms.MouseButtons.Left)
                return;
            this.Visible = false;
        }

        /// <summary>
        /// 当鼠标按下最小化按钮时，改变样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picMiniButton_MouseDown(object sender, MouseEventArgs e)
        {
            // 必须是鼠标左键单击才能最小化
            if (e.Button != System.Windows.Forms.MouseButtons.Left)
                return;
            this.picMiniButton.Image = this._frmImgBtn.picMiniDown.Image;
        }

        /// <summary>
        /// 鼠标移动到最小化按钮上时，改变样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picMiniButton_MouseEnter(object sender, EventArgs e)
        {
            this.picMiniButton.Image = this._frmImgBtn.picMiniHighlight.Image;
        }

        /// <summary>
        /// 鼠标移动离开最小化按钮时，改变样式
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picMiniButton_MouseLeave(object sender, EventArgs e)
        {
            this.picMiniButton.Image = this._frmImgBtn.picMiniNormal.Image;
        }

        #endregion

        #region 超级模式图片按钮的相关事件

        /// <summary>
        /// 超级模式按钮，鼠标按下
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picSuperMode_MouseDown(object sender, MouseEventArgs e)
        {
            if (this._IsSuperMode)
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_open_down.png"];
            }
            else
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_normal_down.png"];
            }
        }

        /// <summary>
        /// 超级模式按钮，鼠标点击
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picSuperMode_MouseClick(object sender, MouseEventArgs e)
        {
            // 设置是否启动超级模式
            this._IsSuperMode = !this._IsSuperMode;

            if (this._IsSuperMode)
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_open.png"];
            }
            else
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_normal.png"];
            }
        }

        /// <summary>
        /// 超级按钮，鼠标离开
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void picSuperMode_MouseLeave(object sender, EventArgs e)
        {
            if (this._IsSuperMode)
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_open.png"];
            }
            else
            {
                this.SuperModeImage = this.imgsCtrlPict.Images["mode_normal.png"];
            }
        }

        #endregion

        #endregion

        #region 点击任何位置让窗体移动的事件

        /// <summary>
        /// 鼠标移动在窗体上时
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form_MouseMove(object sender, MouseEventArgs e)
        {
            // 如果允许移动 ， 并且窗体模式为正常(即不是最大化也不是最小化)，就改变窗体坐标
            if (_IsMouseDown && this.WindowState == FormWindowState.Normal && e.Button == System.Windows.Forms.MouseButtons.Left)
            {
                int l = this.Left + (e.X - _currLocation.X);
                int t = this.Top + (e.Y - _currLocation.Y);

                this.Left = l;
                this.Top = t;
            }
        }

        /// <summary>
        /// 鼠标在窗体上按下键时
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form_MouseDown(object sender, MouseEventArgs e)
        {
            // 允许移动窗体
            this._IsMouseDown = true;
            // 获取鼠标按下时的坐标
            this._currLocation = new Point(e.X, e.Y);
        }

        /// <summary>
        /// 鼠标移入窗体上时
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void Form_MouseUp(object sender, MouseEventArgs e)
        {
            // 禁止移动窗体
            this._IsMouseDown = false;
        }

        #endregion

        #region 类似QQ窗体自动隐藏的事件

        private void FrmServiceManage_MouseUp(object sender, MouseEventArgs e)
        {
            this.QQForm_MouseUp();
        }

        private void FrmServiceManage_MouseLeave(object sender, EventArgs e)
        {
            this.QQForm_MouseLeave();
        }

        private void FrmServiceManage_MouseEnter(object sender, EventArgs e)
        {
            this.QQForm_MouseEnter();
        }

        #endregion

        #region 工具条的所有事件

        #region Oracle数据库的相关事件

        /// <summary>
        /// 修改Oracle配置文件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tsmiOracleCorrectConfigFile_Click(object sender, EventArgs e)
        {
            this.CorrectOracleConfigurationFile();
        }

        /// <summary>
        /// 更改Oracle11g的配置文件，
        /// 并开启主服务和监听服务
        /// 并运行蛤蟆工具
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tssbOracle11g_ButtonClick(object sender, EventArgs e)
        {
            // 超级模式
            if (this._IsSuperMode)
            {
                // 更正 oracle 11g 配置文件
                this.CorrectOracleConfigurationFile();

                // 开启Oracle主服务
                //this.ExecuteServiceManage(this.tsmiOracleMainServiceStart.Tag.ToString());
                // 开启Oracle监听服务
                //this.ExecuteServiceManage(this.tsmiOracleListenerServiceStart.Tag.ToString());
                //System.Threading.Thread.Sleep(5000);

                //ToolStripSplitButton tssb = sender as ToolStripSplitButton;

                // 获得他要执行的操作cmd命令行
                String serviceName = this.tssbOracle11g.Tag.ToString();
                // 发送请求
                this.ExecuteServiceManage(serviceName);
                return;
            }

            // 开启蛤蟆工具，调用打开程序的事件
            this.OpenProgram_Click(this.tsmiOracleTodeOpen, e);
        }

        /// <summary>
        /// toad的注册机的key禁止修改，不允许输入字符
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tscboToadKeyName_TextChanged(object sender, EventArgs e)
        {
            // 记录显示的值是否存在在注册机中（this._toadKeyGen的keys）
            if (this.GetToadKeyGenValue() == null)
            {
                // 不存在，就设置默认选中第一个key
                this.tscboToadKeyName.SelectedIndex = 0;
            }
        }

        /// <summary>
        /// toad注册机的注册名下拉列表的选中项更改时，更改对应的注册码到文本框中
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tscboToadKeyName_SelectedIndexChanged(object sender, EventArgs e)
        {
            this.tstxtToadKeyValue.Text = this.GetToadKeyGenValue();
        }

        #endregion

        #region SQL Server的相关事件

        /// <summary>
        /// 开启 SQL Server 2005 服务
        /// 开启 SQL Server 2005 程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tssbSQL2005_ButtonClick(object sender, EventArgs e)
        {
            // 超级模式
            if (this._IsSuperMode)
            {
                // 获得他要执行的操作cmd命令行
                String serviceName = this.tssbOracle11g.Tag.ToString();
                // 发送请求
                this.ExecuteServiceManage(serviceName);
                return;
            }

            // 打开sql server 2005 程序
            this.OpenProgram_Click(this.tsmiSQL2005Open, e);
        }

        /// <summary>
        /// 打开 SQL Server 2008 服务
        /// 打开 SQL Server 2008 程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tssbSQL2008_ButtonClick(object sender, EventArgs e)
        {
            // 超级模式
            if (this._IsSuperMode)
            {
                // 获得他要执行的操作cmd命令行
                String serviceName = this.tssbOracle11g.Tag.ToString();
                // 发送请求
                this.ExecuteServiceManage(serviceName);
                return;
            }

            // 打开 SQL Server 2008 程序
            this.OpenProgram_Click(this.tsmiSQL2008Open, e);
        }

        #endregion

        #region MySQL的相关事件

        /// <summary>
        /// 打开 MySQL 服务
        /// 打开 MySQL 程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void tssbMySQL_ButtonClick(object sender, EventArgs e)
        {
            // 超级模式
            if (this._IsSuperMode)
            {
                // 获得他要执行的操作cmd命令行
                String serviceName = this.tssbOracle11g.Tag.ToString();
                // 发送请求
                this.ExecuteServiceManage(serviceName);
                return;
            }

            // 打开MySQL
            this.OpenProgram_Click(this.tsmiMySQLOpen, e);
        }

        #endregion
        
        /// <summary>
        /// 单击服务管理按钮，开启或关闭服务
        /// 利用事件对象的tag属性来控制服务
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ServerManage_Click(object sender, EventArgs e)
        {
            // 获取点击的菜单，并获取tag
            var tsmi = sender as ToolStripMenuItem;
            String serviceName = tsmi.Tag.ToString();
            // 发送请求
            this.ExecuteServiceManage(serviceName);
        }

        /// <summary>
        /// 打开程序的事件，调用事件对象的tag属性（程序路径），打开程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void OpenProgram_Click(object sender, EventArgs e)
        {
            var tsmi = sender as ToolStripMenuItem;
            try
            {
                // 如果tag为null，就不打开程序
                if (tsmi.Tag == null)
                    return;
                // 打开程序
                Process.Start(tsmi.Tag.ToString());
            }
            catch (Exception)
            {
                String msg = String.Format("程序路径：{0}，没有找到！\n无法打开程序！", tsmi.Tag.ToString());
                MessageBox.Show(msg, Application.ProductName, MessageBoxButtons.OK, MessageBoxIcon.Stop);
                // 将该对象的tag设为null，以后禁止再次打开
                tsmi.Tag = null;
            }
        }

        #endregion

        #region 图标控件和右键菜单的事件

        /// <summary>
        /// 鼠标点击图标控件的时候，显示主窗体
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void iconManage_MouseClick(object sender, MouseEventArgs e)
        {
            if (e.Button == System.Windows.Forms.MouseButtons.Left)
            {
                // 判断窗体是否已经停靠在window边缘
                if (this._IsDockWindow && this.Visible && this.Top <= 3) 
                {
                    this.QQForm_MouseEnter();
                }
                else if (!this._IsDockWindow && this.Visible && this.Top <= 3)
                {
                    this.QQForm_MouseLeave();
                }
                else
                {
                    this.Visible = !this.Visible;
                }
            }
        }

        /// <summary>
        /// 鼠标点击右键菜单，显示主菜单
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rmnuShowMain_Click(object sender, EventArgs e)
        {
            if (!this.Visible)
            {
                this.Visible = true;
            }

            // 显示窗体效果
            this.QQForm_MouseEnter();
        }

        /// <summary>
        /// 图标控件，右键菜单，关于
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rmnuAbout_Click(object sender, EventArgs e)
        {
            // 居中显示
            this._frmAbout.StartPosition = FormStartPosition.CenterScreen;
            this._frmAbout.ShowDialog();
        }

        /// <summary>
        /// 退出程序
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void rmnuExit_Click(object sender, EventArgs e)
        {
            Application.ExitThread();
        }

        #endregion

        #endregion

    }
}
